{
  "info": {
    "name": "Todo API Assignment",
    "_postman_id": "b3f7b3b0-1234-4a55-89cc-0000todoapi",
    "description": "Коллекция для проверки задания по разработке и тестированию API (Todo).",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Healthcheck",
      "request": {
        "method": "GET",
        "header": [],
        "url": { "raw": "http://localhost:3000/", "protocol": "http", "host": ["localhost"], "port": "3000", "path": [""] }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status 200', function(){ pm.response.to.have.status(200); });",
            "const json = pm.response.json();",
            "pm.test('Has status ok', function(){ pm.expect(json.status).to.eql('ok'); });"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "Create Task",
      "request": {
        "method": "POST",
        "header": [ { "key": "Content-Type", "value": "application/json" } ],
        "body": {
          "mode": "raw",
          "raw": "{\"title\":\"Task from Postman\",\"description\":\"demo\",\"completed\":false}"
        },
        "url": { "raw": "http://localhost:3000/tasks", "protocol": "http", "host": ["localhost"], "port": "3000", "path": ["tasks"] }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status 201', function(){ pm.response.to.have.status(201); });",
            "const json = pm.response.json();",
            "pm.environment.set('lastId', json.id);",
            "pm.test('Has id', function(){ pm.expect(json).to.have.property('id'); });",
            "pm.test('Defaults', function(){ pm.expect(json.completed).to.be.a('boolean'); });"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "List Tasks (all)",
      "request": { "method": "GET",
        "url": { "raw": "http://localhost:3000/tasks", "protocol": "http", "host": ["localhost"], "port": "3000", "path": ["tasks"] }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status 200', function(){ pm.response.to.have.status(200); });",
            "const arr = pm.response.json();",
            "pm.test('Is array', function(){ pm.expect(arr).to.be.an('array'); });"
          ],
          "type":"text/javascript"
        }
      }]
    },
    {
      "name": "List Tasks (completed=true)",
      "request": { "method": "GET",
        "url": { "raw": "http://localhost:3000/tasks?completed=true", "protocol": "http", "host": ["localhost"], "port": "3000", "path": ["tasks"], "query":[{"key":"completed","value":"true"}] }
      },
      "event": [{
        "listen":"test",
        "script": {
          "exec":[
            "pm.test('Status 200', function(){ pm.response.to.have.status(200); });",
            "const arr = pm.response.json();",
            "pm.test('Is array', function(){ pm.expect(arr).to.be.an('array'); });",
            "if(arr.length){ pm.test('All completed=true', function(){ pm.expect(arr.every(x=>x.completed===true)).to.eql(true); }); }"
          ],
          "type":"text/javascript"
        }
      }]
    },
    {
      "name": "Get Task by ID (exists)",
      "request": { "method": "GET",
        "url": { "raw": "http://localhost:3000/tasks/{{lastId}}", "protocol": "http", "host": ["localhost"], "port": "3000", "path": ["tasks", "{{lastId}}"] }
      },
      "event": [{
        "listen":"test",
        "script": {
          "exec":[
            "pm.test('Status 200', function(){ pm.response.to.have.status(200); });",
            "const json = pm.response.json();",
            "pm.test('ID matches env', function(){ pm.expect(json.id).to.eql(Number(pm.environment.get('lastId'))); });"
          ],
          "type":"text/javascript"
        }
      }]
    },
    {
      "name": "Get Task by ID (not found)",
      "request": { "method": "GET",
        "url": { "raw": "http://localhost:3000/tasks/999999", "protocol": "http", "host": ["localhost"], "port": "3000", "path": ["tasks", "999999"] }
      },
      "event": [{
        "listen":"test",
        "script": {
          "exec":[
            "pm.test('Status 404', function(){ pm.response.to.have.status(404); });"
          ],
          "type":"text/javascript"
        }
      }]
    },
    {
      "name": "Update Task",
      "request": {
        "method": "PUT",
        "header": [ { "key": "Content-Type", "value": "application/json" } ],
        "body": { "mode": "raw", "raw": "{\"title\":\"Task updated\",\"completed\":true}" },
        "url": { "raw": "http://localhost:3000/tasks/{{lastId}}", "protocol": "http", "host": ["localhost"], "port": "3000", "path": ["tasks", "{{lastId}}"] }
      },
      "event": [{
        "listen":"test",
        "script": {
          "exec":[
            "pm.test('Status 200', function(){ pm.response.to.have.status(200); });",
            "const json = pm.response.json();",
            "pm.test('Title updated', function(){ pm.expect(json.title).to.eql('Task updated'); });",
            "pm.test('Completed true', function(){ pm.expect(json.completed).to.eql(true); });"
          ],
          "type":"text/javascript"
        }
      }]
    },
    {
      "name": "Delete Task",
      "request": {
        "method": "DELETE",
        "url": { "raw": "http://localhost:3000/tasks/{{lastId}}", "protocol": "http", "host": ["localhost"], "port": "3000", "path": ["tasks", "{{lastId}}"] }
      },
      "event": [{
        "listen":"test",
        "script": {
          "exec":[
            "pm.test('Status 204', function(){ pm.response.to.have.status(204); });"
          ],
          "type":"text/javascript"
        }
      }]
    },
    {
      "name": "Verify Deletion (404)",
      "request": { "method":"GET",
        "url": { "raw": "http://localhost:3000/tasks/{{lastId}}", "protocol":"http","host":["localhost"],"port":"3000","path":["tasks","{{lastId}}"] }
      },
      "event": [{
        "listen":"test",
        "script": {
          "exec":[
            "pm.test('Status 404', function(){ pm.response.to.have.status(404); });"
          ],
          "type":"text/javascript"
        }
      }]
    }
  ],
  "event": [],
  "variable": []
}
